/**********************************************************************
 * Extern for MediumEditor
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var MediumEditor = {
  "Events": function () {},
  "Extension": {
    "extend": function () {}
  },
  "extensions": {
    "anchor": {
      "extend": function () {},
      "isBuiltInButton": function () {}
    },
    "anchorPreview": {
      "extend": function () {}
    },
    "autoLink": {
      "extend": function () {}
    },
    "button": {
      "extend": function () {},
      "isBuiltInButton": function () {}
    },
    "fileDragging": {
      "extend": function () {}
    },
    "fontName": {
      "extend": function () {},
      "isBuiltInButton": function () {}
    },
    "fontSize": {
      "extend": function () {},
      "isBuiltInButton": function () {}
    },
    "form": {
      "extend": function () {},
      "isBuiltInButton": function () {}
    },
    "imageDragging": {
      "extend": function () {}
    },
    "keyboardCommands": {
      "extend": function () {}
    },
    "paste": {
      "extend": function () {}
    },
    "placeholder": {
      "extend": function () {}
    },
    "toolbar": {
      "extend": function () {}
    }
  },
  "getEditorFromElement": function () {},
  "parseVersionString": function () {},
  "selection": {
    "clearSelection": function () {},
    "doesRangeStartWithImages": function () {},
    "exportSelection": function () {},
    "findMatchingSelectionParent": function () {},
    "getCaretOffsets": function () {},
    "getIndexRelativeToAdjacentEmptyBlocks": function () {},
    "getSelectedElements": function () {},
    "getSelectedParentElement": function () {},
    "getSelectionElement": function () {},
    "getSelectionHtml": function () {},
    "getSelectionRange": function () {},
    "getSelectionStart": function () {},
    "getTrailingImageCount": function () {},
    "importSelection": function () {},
    "importSelectionMoveCursorPastAnchor": function () {},
    "importSelectionMoveCursorPastBlocks": function () {},
    "moveCursor": function () {},
    "rangeSelectsSingleNode": function () {},
    "select": function () {},
    "selectNode": function () {},
    "selectRange": function () {},
    "selectionContainsContent": function () {},
    "selectionInContentEditableFalse": function () {}
  },
  "util": {
    "_getFirstTextNode": function () {},
    "addClassToAnchors": function () {},
    "blockContainerElementNames": {},
    "cleanListDOM": function () {},
    "cleanupAttrs": function () {},
    "cleanupTags": function () {},
    "createLink": function () {},
    "defaults": function () {},
    "deprecated": function () {},
    "deprecatedMethod": function () {},
    "depthOfNode": function () {},
    "emptyElementNames": {},
    "ensureUrlHasProtocol": function () {},
    "execFormatBlock": function () {},
    "extend": function () {},
    "findAdjacentTextNodeWithContent": function () {},
    "findCommonRoot": function () {},
    "findOrCreateMatchingTextNodes": function () {},
    "findPreviousSibling": function () {},
    "getClosestBlockContainer": function () {},
    "getClosestTag": function () {},
    "getContainerEditorElement": function () {},
    "getFirstSelectableLeafNode": function () {},
    "getFirstTextNode": function () {},
    "getKeyCode": function () {},
    "getTopBlockContainer": function () {},
    "guid": function () {},
    "htmlEntities": function () {},
    "insertHTMLCommand": function () {},
    "isBlockContainer": function () {},
    "isDescendant": function () {},
    "isEdge": {},
    "isElement": function () {},
    "isElementAtBeginningOfBlock": function () {},
    "isFF": {},
    "isIE": {},
    "isKey": function () {},
    "isListItem": function () {},
    "isMac": {},
    "isMediumEditorElement": function () {},
    "isMetaCtrlKey": function () {},
    "keyCode": {
      "BACKSPACE": {},
      "DELETE": {},
      "ENTER": {},
      "ESCAPE": {},
      "K": {},
      "M": {},
      "SPACE": {},
      "TAB": {},
      "V": {}
    },
    "moveTextRangeIntoElement": function () {},
    "removeTargetBlank": function () {},
    "setTargetBlank": function () {},
    "splitByBlockElements": function () {},
    "splitEndNodeIfNeeded": function () {},
    "splitOffDOMTree": function () {},
    "splitStartNodeIfNeeded": function () {},
    "throttle": function () {},
    "traverseUp": function () {},
    "unwrap": function () {},
    "unwrapTags": function () {},
    "warn": function () {}
  },
  "version": {
    "major": {},
    "minor": {},
    "preRelease": {},
    "revision": {},
    "toString": function () {}
  }
};
MediumEditor.prototype = {
  "addBuiltInExtension": function () {},
  "addElements": function () {},
  "checkContentChanged": function () {},
  "checkSelection": function () {},
  "cleanPaste": function () {},
  "createLink": function () {},
  "defaults": function () {},
  "delay": function () {},
  "destroy": function () {},
  "execAction": function () {},
  "exportSelection": function () {},
  "getContent": function () {},
  "getExtensionByName": function () {},
  "getFocusedElement": function () {},
  "getSelectedParentElement": function () {},
  "importSelection": function () {},
  "init": function () {},
  "off": function () {},
  "on": function () {},
  "pasteHTML": function () {},
  "queryCommandState": function () {},
  "removeElements": function () {},
  "resetContent": function () {},
  "restoreSelection": function () {},
  "saveSelection": function () {},
  "selectAllContents": function () {},
  "selectElement": function () {},
  "serialize": function () {},
  "setContent": function () {},
  "setup": function () {},
  "startSelectionUpdates": function () {},
  "stopSelectionUpdates": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "unsubscribe": function () {}
};
MediumEditor.Events.prototype = {
  "InputEventOnContenteditableSupported": function () {},
  "attachAllEventsToElement": function () {},
  "attachCustomEvent": function () {},
  "attachDOMEvent": function () {},
  "attachToEachElement": function () {},
  "attachToExecCommand": function () {},
  "cleanupElement": function () {},
  "destroy": function () {},
  "detachAllCustomEvents": function () {},
  "detachAllDOMEvents": function () {},
  "detachAllEventsFromElement": function () {},
  "detachCustomEvent": function () {},
  "detachDOMEvent": function () {},
  "detachExecCommand": function () {},
  "disableCustomEvent": function () {},
  "enableCustomEvent": function () {},
  "focusElement": function () {},
  "handleBlur": function () {},
  "handleBodyClick": function () {},
  "handleBodyFocus": function () {},
  "handleBodyMousedown": function () {},
  "handleClick": function () {},
  "handleDocumentExecCommand": function () {},
  "handleDocumentSelectionChange": function () {},
  "handleDragging": function () {},
  "handleDrop": function () {},
  "handleInput": function () {},
  "handleKeydown": function () {},
  "handleKeypress": function () {},
  "handleKeyup": function () {},
  "handleMouseover": function () {},
  "handlePaste": function () {},
  "indexOfCustomListener": function () {},
  "indexOfListener": function () {},
  "setupListener": function () {},
  "triggerCustomEvent": function () {},
  "unwrapExecCommand": function () {},
  "updateFocus": function () {},
  "updateInput": function () {},
  "wrapExecCommand": function () {}
};
MediumEditor.Extension.prototype = {
  "base": function () {},
  "checkState": function () {},
  "destroy": function () {},
  "document": function () {},
  "execAction": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getInteractionElements": function () {},
  "init": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "queryCommandState": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "window": function () {}
};
MediumEditor.extensions.anchor.prototype = {
  "action": function () {},
  "activeClass": function () {},
  "aria": function () {},
  "attachFormEvents": function () {},
  "base": function () {},
  "checkLinkFormat": function () {},
  "checkState": function () {},
  "completeFormSave": function () {},
  "constructor": function () {},
  "contentDefault": function () {},
  "contentFA": function () {},
  "createButton": function () {},
  "createForm": function () {},
  "customClassOption": function () {},
  "customClassOptionText": function () {},
  "defaults": function () {},
  "destroy": function () {},
  "doFormCancel": function () {},
  "doFormSave": function () {},
  "document": function () {},
  "ensureEncodedParam": function () {},
  "ensureEncodedQuery": function () {},
  "ensureEncodedUri": function () {},
  "ensureEncodedUriComponent": function () {},
  "execAction": function () {},
  "formCloseLabel": function () {},
  "formSaveLabel": function () {},
  "getAction": function () {},
  "getAnchorButtonCheckbox": function () {},
  "getAnchorTargetCheckbox": function () {},
  "getAria": function () {},
  "getButton": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getForm": function () {},
  "getFormOpts": function () {},
  "getInput": function () {},
  "getInteractionElements": function () {},
  "getTagNames": function () {},
  "getTemplate": function () {},
  "handleClick": function () {},
  "handleCloseClick": function () {},
  "handleFormClick": function () {},
  "handleKeydown": function () {},
  "handleSaveClick": function () {},
  "handleTextboxKeyup": function () {},
  "hasForm": function () {},
  "hideForm": function () {},
  "hideToolbarDefaultActions": function () {},
  "init": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "isDisplayed": function () {},
  "linkValidation": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "placeholderText": function () {},
  "queryCommandState": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "setToolbarPosition": function () {},
  "showForm": function () {},
  "showToolbarDefaultActions": function () {},
  "subscribe": function () {},
  "tagNames": function () {},
  "targetCheckbox": function () {},
  "targetCheckboxText": function () {},
  "trigger": function () {},
  "window": function () {}
};
MediumEditor.extensions.anchorPreview.prototype = {
  "attachPreviewHandlers": function () {},
  "attachToEditables": function () {},
  "base": function () {},
  "checkState": function () {},
  "constructor": function () {},
  "createPreview": function () {},
  "destroy": function () {},
  "detachPreviewHandlers": function () {},
  "document": function () {},
  "execAction": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getInteractionElements": function () {},
  "getPreviewElement": function () {},
  "getTemplate": function () {},
  "handleAnchorMouseout": function () {},
  "handleClick": function () {},
  "handleEditableMouseover": function () {},
  "handlePositionedToolbar": function () {},
  "handlePreviewMouseout": function () {},
  "handlePreviewMouseover": function () {},
  "hideDelay": function () {},
  "hidePreview": function () {},
  "init": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "positionPreview": function () {},
  "previewValueSelector": function () {},
  "queryCommandState": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "showOnEmptyLinks": function () {},
  "showPreview": function () {},
  "showWhenToolbarIsVisible": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "updatePreview": function () {},
  "window": function () {}
};
MediumEditor.extensions.autoLink.prototype = {
  "base": function () {},
  "checkState": function () {},
  "constructor": function () {},
  "createAutoLink": function () {},
  "destroy": function () {},
  "document": function () {},
  "execAction": function () {},
  "findLinkableText": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getInteractionElements": function () {},
  "init": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "isLastInstance": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "onBlur": function () {},
  "onKeypress": function () {},
  "performLinking": function () {},
  "performLinkingWithinElement": function () {},
  "queryCommandState": function () {},
  "removeObsoleteAutoLinkSpans": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "shouldNotLink": function () {},
  "splitTextBeforeEnd": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "window": function () {}
};
MediumEditor.extensions.button.prototype = {
  "base": function () {},
  "checkState": function () {},
  "constructor": function () {},
  "createButton": function () {},
  "defaults": function () {},
  "destroy": function () {},
  "document": function () {},
  "execAction": function () {},
  "getAction": function () {},
  "getAria": function () {},
  "getButton": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getInteractionElements": function () {},
  "getTagNames": function () {},
  "handleClick": function () {},
  "init": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "queryCommandState": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "window": function () {}
};
MediumEditor.extensions.fileDragging.prototype = {
  "allowedTypes": function () {},
  "base": function () {},
  "checkState": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "document": function () {},
  "execAction": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getInteractionElements": function () {},
  "handleDrag": function () {},
  "handleDrop": function () {},
  "init": function () {},
  "insertImageFile": function () {},
  "isActive": function () {},
  "isAllowedFile": function () {},
  "isAlreadyApplied": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "queryCommandState": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "window": function () {}
};
MediumEditor.extensions.fontName.prototype = {
  "action": function () {},
  "activeClass": function () {},
  "aria": function () {},
  "base": function () {},
  "checkState": function () {},
  "clearFontName": function () {},
  "constructor": function () {},
  "contentDefault": function () {},
  "contentFA": function () {},
  "createButton": function () {},
  "createForm": function () {},
  "defaults": function () {},
  "destroy": function () {},
  "doFormCancel": function () {},
  "doFormSave": function () {},
  "document": function () {},
  "execAction": function () {},
  "fonts": function () {},
  "formCloseLabel": function () {},
  "formSaveLabel": function () {},
  "getAction": function () {},
  "getAria": function () {},
  "getButton": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getForm": function () {},
  "getInteractionElements": function () {},
  "getSelect": function () {},
  "getTagNames": function () {},
  "handleClick": function () {},
  "handleCloseClick": function () {},
  "handleFontChange": function () {},
  "handleFormClick": function () {},
  "handleSaveClick": function () {},
  "hasForm": function () {},
  "hideForm": function () {},
  "hideToolbarDefaultActions": function () {},
  "init": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "isDisplayed": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "queryCommandState": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "setToolbarPosition": function () {},
  "showForm": function () {},
  "showToolbarDefaultActions": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "window": function () {}
};
MediumEditor.extensions.fontSize.prototype = {
  "action": function () {},
  "activeClass": function () {},
  "aria": function () {},
  "base": function () {},
  "checkState": function () {},
  "clearFontSize": function () {},
  "constructor": function () {},
  "contentDefault": function () {},
  "contentFA": function () {},
  "createButton": function () {},
  "createForm": function () {},
  "defaults": function () {},
  "destroy": function () {},
  "doFormCancel": function () {},
  "doFormSave": function () {},
  "document": function () {},
  "execAction": function () {},
  "formCloseLabel": function () {},
  "formSaveLabel": function () {},
  "getAction": function () {},
  "getAria": function () {},
  "getButton": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getForm": function () {},
  "getInput": function () {},
  "getInteractionElements": function () {},
  "getTagNames": function () {},
  "handleClick": function () {},
  "handleCloseClick": function () {},
  "handleFormClick": function () {},
  "handleSaveClick": function () {},
  "handleSliderChange": function () {},
  "hasForm": function () {},
  "hideForm": function () {},
  "hideToolbarDefaultActions": function () {},
  "init": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "isDisplayed": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "queryCommandState": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "setToolbarPosition": function () {},
  "showForm": function () {},
  "showToolbarDefaultActions": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "window": function () {}
};
MediumEditor.extensions.form.prototype = {
  "activeClass": function () {},
  "base": function () {},
  "checkState": function () {},
  "constructor": function () {},
  "createButton": function () {},
  "defaults": function () {},
  "destroy": function () {},
  "document": function () {},
  "execAction": function () {},
  "formCloseLabel": function () {},
  "formSaveLabel": function () {},
  "getAction": function () {},
  "getAria": function () {},
  "getButton": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getForm": function () {},
  "getInteractionElements": function () {},
  "getTagNames": function () {},
  "handleClick": function () {},
  "hasForm": function () {},
  "hideForm": function () {},
  "hideToolbarDefaultActions": function () {},
  "init": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "isDisplayed": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "queryCommandState": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "setToolbarPosition": function () {},
  "showForm": function () {},
  "showToolbarDefaultActions": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "window": function () {}
};
MediumEditor.extensions.imageDragging.prototype = {
  "base": function () {},
  "checkState": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "document": function () {},
  "execAction": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getInteractionElements": function () {},
  "handleDrag": function () {},
  "handleDrop": function () {},
  "init": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "queryCommandState": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "window": function () {}
};
MediumEditor.extensions.keyboardCommands.prototype = {
  "base": function () {},
  "checkState": function () {},
  "commands": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "document": function () {},
  "execAction": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getInteractionElements": function () {},
  "handleKeydown": function () {},
  "init": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "queryCommandState": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "window": function () {}
};
MediumEditor.extensions.paste.prototype = {
  "base": function () {},
  "checkState": function () {},
  "cleanAttrs": function () {},
  "cleanPaste": function () {},
  "cleanPastedHTML": function () {},
  "cleanReplacements": function () {},
  "cleanTags": function () {},
  "cleanupSpans": function () {},
  "constructor": function () {},
  "createPasteBin": function () {},
  "destroy": function () {},
  "doPaste": function () {},
  "document": function () {},
  "execAction": function () {},
  "filterCommonBlocks": function () {},
  "filterLineBreak": function () {},
  "forcePlainText": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getInteractionElements": function () {},
  "getPasteBin": function () {},
  "getPasteBinHtml": function () {},
  "handleAddElement": function () {},
  "handleKeydown": function () {},
  "handlePaste": function () {},
  "handlePasteBinPaste": function () {},
  "init": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "isCommonBlock": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "pasteHTML": function () {},
  "preCleanReplacements": function () {},
  "queryCommandState": function () {},
  "removePasteBin": function () {},
  "removeWithParent": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "unwrapTags": function () {},
  "window": function () {}
};
MediumEditor.extensions.placeholder.prototype = {
  "attachEventHandlers": function () {},
  "base": function () {},
  "checkState": function () {},
  "cleanupElement": function () {},
  "constructor": function () {},
  "destroy": function () {},
  "document": function () {},
  "execAction": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getInteractionElements": function () {},
  "handleAddElement": function () {},
  "handleBlur": function () {},
  "handleFocus": function () {},
  "handleInput": function () {},
  "handleRemoveElement": function () {},
  "hideOnClick": function () {},
  "hidePlaceholder": function () {},
  "init": function () {},
  "initElement": function () {},
  "initPlaceholders": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "queryCommandState": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "showPlaceholder": function () {},
  "subscribe": function () {},
  "text": function () {},
  "trigger": function () {},
  "updatePlaceholder": function () {},
  "window": function () {}
};
MediumEditor.extensions.toolbar.prototype = {
  "align": function () {},
  "allowMultiParagraphSelection": function () {},
  "attachEventHandlers": function () {},
  "base": function () {},
  "buttons": function () {},
  "checkActiveButtons": function () {},
  "checkState": function () {},
  "constructor": function () {},
  "createToolbar": function () {},
  "createToolbarButtons": function () {},
  "destroy": function () {},
  "diffLeft": function () {},
  "diffTop": function () {},
  "document": function () {},
  "execAction": function () {},
  "firstButtonClass": function () {},
  "forEachExtension": function () {},
  "getEditorElements": function () {},
  "getEditorId": function () {},
  "getEditorOption": function () {},
  "getInteractionElements": function () {},
  "getToolbarActionsElement": function () {},
  "getToolbarElement": function () {},
  "handleBlur": function () {},
  "handleDocumentMouseup": function () {},
  "handleEditableClick": function () {},
  "handleEditableKeyup": function () {},
  "handleFocus": function () {},
  "handleWindowResize": function () {},
  "handleWindowScroll": function () {},
  "hideExtensionForms": function () {},
  "hideToolbar": function () {},
  "hideToolbarDefaultActions": function () {},
  "init": function () {},
  "initThrottledMethods": function () {},
  "isActive": function () {},
  "isAlreadyApplied": function () {},
  "isDisplayed": function () {},
  "isToolbarDefaultActionsDisplayed": function () {},
  "lastButtonClass": function () {},
  "modifySelection": function () {},
  "multipleBlockElementsSelected": function () {},
  "name": function () {},
  "off": function () {},
  "on": function () {},
  "positionStaticToolbar": function () {},
  "positionToolbar": function () {},
  "positionToolbarIfShown": function () {},
  "queryCommandState": function () {},
  "relativeContainer": function () {},
  "setActive": function () {},
  "setInactive": function () {},
  "setToolbarButtonStates": function () {},
  "setToolbarPosition": function () {},
  "showAndUpdateToolbar": function () {},
  "showToolbar": function () {},
  "showToolbarDefaultActions": function () {},
  "standardizeSelectionStart": function () {},
  "static": function () {},
  "sticky": function () {},
  "stickyTopOffset": function () {},
  "subscribe": function () {},
  "trigger": function () {},
  "updateOnEmptySelection": function () {},
  "window": function () {}
};
/**********************************************************************
 * End Generated Extern for MediumEditor
/**********************************************************************/